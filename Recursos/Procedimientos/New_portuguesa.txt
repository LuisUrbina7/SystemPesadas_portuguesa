DELIMITER $$


DROP PROCEDURE IF EXISTS `DELETE_PESADAS`$$

CREATE PROCEDURE `DELETE_PESADAS`(
    IN vNUMERO VARCHAR(20),
    IN vCLIENTE VARCHAR(10),
    IN vSCS VARCHAR(6),
    IN vTYPE VARCHAR(6)
    )
BEGIN
DECLARE TDT_CODIGO VARCHAR(10);

SET TDT_CODIGO := IF(vTYPE IN('1','2','3'),'PDA','PDAT');	
	
DELETE ADN_PESADAS_CANASTAS 
FROM ADN_PESADAS_CANASTAS
JOIN ADN_PESADAS 
ON ADN_PESADAS.PDA_CANASTA_TIPO = ADN_PESADAS_CANASTAS.PCT_NUMERO
WHERE ADN_PESADAS.PDA_NUMERO = vNUMERO
AND ADN_PESADAS.PDA_SCS_CODIGO = vSCS
AND ADN_PESADAS.PDA_DET_CODIGO = vCLIENTE
AND ADN_PESADAS.PDA_TIPO = vTYPE;
DELETE FROM ADN_PESADAS
WHERE
PDA_NUMERO = vNUMERO
AND PDA_DET_CODIGO = vCLIENTE
AND PDA_TIPO = vTYPE;
DELETE FROM ADN_MOVCLI WHERE MCL_DCL_TDT_CODIGO=TDT_CODIGO AND MCL_DCL_NUMERO=vNUMERO AND MCL_DCL_SCS_CODIGO = vSCS ;
 
DELETE FROM ADN_DOCCLI WHERE DCL_TDT_CODIGO = TDT_CODIGO AND DCL_NUMERO = vNUMERO AND DCL_CLT_CODIGO = vCLIENTE; -- AND DCL_DESCRIDOWN IN('1','2');
	
	
	END$$

DELIMITER ;


DELIMITER $$



DROP PROCEDURE IF EXISTS `IMPORT_PESADAS`$$

CREATE  PROCEDURE `IMPORT_PESADAS`(
    IN vNUMERO VARCHAR(255),
    IN vTDT_CODIGO VARCHAR(10),
    IN vSCS_CODIGO VARCHAR(10),
    IN vVEN_CODIGO VARCHAR(10),
    IN vCLT_CODIGO VARCHAR(10), 
    IN vTDT_ORIGEN VARCHAR(10),
    IN vNUMERO_ORIGEN VARCHAR(255),
    IN DATOS JSON,
    IN vTIPO INT
    )
BEGIN
DECLARE CHECKK INT;
DECLARE CORRELATIVE VARCHAR(100);
DECLARE TDT_TIPO VARCHAR(10);
 SET lock_wait_timeout := 20;
 
 
 SET TDT_TIPO:= IF(vTIPO IN('1','2'),'PDA','PDAT');
 
 
 
 
IF vNUMERO = '1' THEN
INSERT IGNORE INTO ADN_DOCCLI( DCL_NUMERO, DCL_TDT_CODIGO, DCL_SCS_CODIGO, DCL_REC_NUMERO, DCL_VEN_CODIGO, DCL_CLT_CODIGO, DCL_FECHA, DCL_NETO, DCL_BASEG, DCL_BASER, DCL_BASES, DCL_EXENTO, DCL_IVAG, DCL_IVAR, DCL_IVAS, DCL_SERFIS, DCL_NUMFIS, DCL_TIPTRA, DCL_CXC, DCL_ACTIVO, DCL_STD_ESTADO, DCL_PORDESC, DCL_FECHAHORA, DCL_HORA, DCL_CONDICION, DCL_PLAZO, DCL_FECHAVEN, DCL_TIPOINV, DCL_TDT_ORIGEN, DCL_ORIGENNUM, DCL_DESCRIPCION, DCL_IDCAJA, DCL_BRUTO, DCL_USUARIO, DCL_ESTACION, DCL_IP, DCL_FHLASTEDIT, DCL_CUENTA, DCL_MONTODCTO, DCL_CLT_CODAUX, DCL_PORDESC2, DCL_PORDESC3, DCL_PAGOELECT, DCL_IVAELEC, DCL_ORIGEN, DCL_FACAFE, DCL_DESCRIDOWN, DCL_EXP_NUMERO, DCL_CCT_CODIGO, DCL_VALORCAM, DCL_MONEDA, DCL_VALORCAM2, DCL_IGTF, DCL_LISAEA ) VALUES
(  (SELECT IFNULL(IF(LENGTH(MAX(CONVERT(DOC2.DCL_NUMERO, SIGNED)) + 1) < 10,LPAD(MAX(CONVERT(DOC2.DCL_NUMERO, SIGNED)) + 1, 10, '0'), MAX(CONVERT(DOC2.DCL_NUMERO, SIGNED)) + 1),'0000000001') FROM ADN_DOCCLI AS DOC2 WHERE DOC2.DCL_TDT_CODIGO = TDT_TIPO AND DOC2.DCL_SCS_CODIGO = '000001' AND DOC2.DCL_TIPTRA = 'D' AND DOC2.DCL_NUMERO REGEXP '^[0-9]*$'),TDT_TIPO, vSCS_CODIGO, '', vVEN_CODIGO, vCLT_CODIGO, CURDATE(), '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '', '', 'D', '0', '0', 'PEN', '0.00', NOW(), CURTIME(), 'CREDITO', '0', CURDATE(), '1', vTDT_ORIGEN, CONCAT(vTDT_ORIGEN,':',vNUMERO_ORIGEN), '', '01', '0.00', '1', 'IPPESADAS', '192.168.1.105', NOW(), 'Indefinida', '0.00', '', '0.00', '0.00', '0', '0', 'MOD', '', vTIPO, '', '',/*(SELECT PERSONALIZAR_GET_TASA('USD',CURDATE()))*/(SELECT TASAVTA FROM TASA WHERE DIA <= CURDATE() AND TASAVTA > 0 ORDER BY DIA DESC LIMIT 1), 'USD', '0.000000', '0.00', '0.00');
 
 SET CORRELATIVE := ( SELECT DCL_NUMERO FROM ADN_DOCCLI WHERE DCL_ID = LAST_INSERT_ID() LIMIT 1);
  
 ELSE
  
  SET CORRELATIVE := vNumero;
  
 END IF;
  
  
  
 -- SET CHECKK = CASE WHEN ROW_COUNT() > 0 THEN 1 ELSE 0 END;
 -- IF CHECKK THEN 
 
 INSERT IGNORE INTO ADN_MOVCLI( MCL_HTI_ID, MCL_DCL_SCS_CODIGO, MCL_DCL_NUMERO, MCL_DCL_TDT_CODIGO, MCL_AMC_CODIGO, MCL_UPP_PDT_CODIGO, MCL_UPP_UND_ID, MCL_DCL_REC_NUMERO, MCL_CTR_CODIGO, MCL_CANTIDAD, MCL_COSTOT, MCL_COSTOP, MCL_FISICO, MCL_LOGICO, MCL_CONTABLE, MCL_ACTIVO, MCL_PORDCTO, MCL_BASE, MCL_DCL_TIPTRA, MCL_PLT_LISTA, MCL_CANTXUND, MCL_PORIVA, MCL_TIVACOD, MCL_AMPLIO, MCL_METCOS, MCL_DESCRI, MCL_COSTOMER, MCL_COSTOU, MCL_BASEC, MCL_AMPLIO2, MCL_AMPLIO3, MCL_TDT_DOCIMPORT, MCL_NUM_DOCIMPORT, MCL_UBP_CODIGO, MCL_FECHAPUB, MCL_CPO_CODIGO, MCL_LOTE, MCL_PRECIOLOTE, MCL_FECHALOTE, MCL_PRECIOUSD, MCL_PRECIOCOP, MCL_LISAEA, MCL_PIEZAS, MCL_PORDCTO2, MCL_ID_ORIGEN )
 
 SELECT 
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.hti') AS HTI,
vSCS_CODIGO,
CORRELATIVE,
TDT_TIPO,
'001',
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.code') AS CODIGO,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.und') AS UND,
'',
'001',
SUM(JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.amount')) AS CANTIDAD,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')), '$.costot') AS COSTOT,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.costop') AS COSTOP,
'0',
'0',
'0',
'0',
'0',
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.base') AS BASE,
'D',
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.list') AS LISTA,
IF(JSON_VALUE(  JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),  '$.canxund'  ) > 0,JSON_VALUE(  JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),  '$.canxund'  ),1
) AS CANXUND,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.poriva') AS PORIVA,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.tiv') AS TIV,
' ',
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.metcos') AS METCOS,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.description') AS DESCRIPCION,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.costomer') AS COSTOMER,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.costou') AS COSTOU,
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.base') AS BASE,
' ',
' ',
IF(vTIPO ='2',JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.tipodoc'),'') AS TDT_DOCIMPORT,
IF(vTIPO='2',CONCAT(JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.tipodoc'),':',JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.number')),'') AS NUM_DOCIMPORT,
'',
'',
'',
'',
'0.00',
'0000-00-00',
'0',
'0',
'0.00',
'0.00',
'0',
JSON_VALUE(JSON_QUERY(DATOS, CONCAT('$[', N - 1, ']')),'$.ids') AS ID_ORIGEN
 FROM(
WITH RECURSIVE CTE_COUNT(N) 
AS(    SELECT 1
      UNION ALL
      SELECT N + 1 
      FROM CTE_COUNT 
      WHERE N < JSON_LENGTH(DATOS)
    )
SELECT N 
FROM CTE_COUNT
) AS NUMERO
GROUP BY CODIGO;
	IF vTIPO = '2' THEN 
	   CALL EXPORT_PESADAS(vCLT_CODIGO,DATOS);
	  
	  
	END IF;
SET lock_wait_timeout := DEFAULT;
SELECT CORRELATIVE;
END$$

DELIMITER ;

DELIMITER $$


CREATE PROCEDURE `POSTCERRAR_PESADA_PK`(
   IN vNumero VARCHAR(10),
   IN vVendedor VARCHAR(10),
   IN vTipodoc VARCHAR(10)
    )
BEGIN
	
	DECLARE done, done2 INT DEFAULT 0;
	DECLARE vId INT DEFAULT 0;
	DECLARE vCantidad, vPiezas DECIMAL(11,2) DEFAULT 0.00;
	DECLARE vCodigo, vUnidad VARCHAR(20);
	
	DECLARE cDocumentos CURSOR FOR
	SELECT 
		MCL_ID,
		MCL_UPP_PDT_CODIGO, 
		MCL_UPP_UND_ID, 
		MCL_PIEZAS FROM ADN_DOCCLI 
		JOIN ADN_MOVCLI ON MCL_DCL_NUMERO = DCL_NUMERO 
			AND MCL_DCL_SCS_CODIGO = DCL_SCS_CODIGO
			AND MCL_DCL_TDT_CODIGO = DCL_TDT_CODIGO 
			AND MCL_DCL_TIPTRA = DCL_TIPTRA
		WHERE DCL_NUMERO = vNumero
		AND DCL_VEN_CODIGO = vVendedor
		AND DCL_TDT_CODIGO = vTipodoc
		AND DCL_TIPTRA = 'D'
		AND DCL_ACTIVO = 1;
		
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;	
	
	
	
	OPEN cDocumentos;
	
		bucle :LOOP
		
		FETCH cDocumentos INTO vId,vCodigo,vUnidad, vPiezas;
		
		IF done THEN
		
			LEAVE bucle;
		
		END IF;
		
		
	
	SET vCantidad := 0;
		
	 SELECT  SUM(PDA_CANTIDAD-PDA_EXTRA)  INTO vCantidad
	FROM ADN_PESADAS WHERE PDA_TIPO = '4' 
		AND PDA_NUMERO = vNumero 
		AND PDA_DET_CODIGO = vVendedor
		AND PDA_UPP_PDT_CODIGO = vCodigo 
		AND PDA_UPP_UND_ID = vUnidad
	GROUP BY PDA_UPP_PDT_CODIGO, PDA_UPP_UND_ID;


	
		IF IFNULL(vCantidad,0)<> 0 THEN 
		 UPDATE adn_movcli SET MCL_AMPLIO = CONCAT("(CTD-OLD:",MCL_CANTIDAD,") ",MCL_AMPLIO), MCL_CANTIDAD = IFNULL(vCantidad,0) 
			WHERE MCL_ID = vId AND MCL_DCL_NUMERO = vNumero AND MCL_DCL_TDT_CODIGO = vTipodoc;
			
		
		
		END IF;
		

		END LOOP bucle;
	
	CLOSE cDocumentos;
	
	
	UPDATE ADN_DOCCLI SET DCL_COMEN2 = CONCAT(':P:', DCL_COMEN2) WHERE DCL_NUMERO = vNumero AND DCL_TDT_CODIGO = vTipodoc AND DCL_VEN_CODIGO = vVendedor
		AND DCL_ACTIVO = 1 AND DCL_TIPTRA = 'D';
	 

	END$$

DELIMITER ;

DELIMITER $$



DROP PROCEDURE IF EXISTS `UPDATE_PESADAS`$$

CREATE DEFINER=`sistemas`@`%` PROCEDURE `UPDATE_PESADAS`(
    IN CLIENTE VARCHAR(20),
    IN DOCUMENTO VARCHAR(20),
    IN SCS VARCHAR(10),
    IN vTYPE VARCHAR(6)
)
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE CANTIDAD,vPTEORICO DECIMAL(14,3);
    DECLARE ID,vPBALANZA INT(11);
    DECLARE TDT_CODIGO VARCHAR(10);


    DECLARE cur_pesadas CURSOR FOR
        SELECT 
            IFNULL(SUM(PDA_CANTIDAD - PDA_EXTRA), 0) AS CANTIDAD, 
            MCL_ID,
            PDT_PESO_BALANZA,
            PDT_PESOTEORICO
        FROM ADN.ADN_PESADAS
        JOIN (
            SELECT  
                MCL_DCL_NUMERO, DCL_CLT_CODIGO, MCL_DCL_TDT_CODIGO, MCL_DCL_SCS_CODIGO, 
                MCL_UPP_PDT_CODIGO, MCL_UPP_UND_ID, MCL_ID ,PDT_PESO_BALANZA, PDT_PESOTEORICO
            FROM ADN.adn_movcli
            JOIN ADN.ADN_DOCCLI ON 
                MCL_DCL_NUMERO = DCL_NUMERO 
                AND MCL_DCL_TDT_CODIGO = DCL_TDT_CODIGO 
                AND MCL_DCL_SCS_CODIGO = DCL_SCS_CODIGO 
                AND MCL_DCL_TIPTRA = DCL_TIPTRA
            JOIN ADN.`ADN_PRODUCTOS` ON MCL_UPP_PDT_CODIGO = PDT_CODIGO
            WHERE 
                DCL_NUMERO = DOCUMENTO 
                AND DCL_CLT_CODIGO = CLIENTE 
                AND DCL_TDT_CODIGO = TDT_CODIGO
                AND MCL_ACTIVO = '0' 
                AND MCL_LOGICO = 0 
                AND MCL_FISICO = 0 
                AND MCL_CONTABLE = 0
        ) AS REGISTROS ON 
            REGISTROS.MCL_DCL_NUMERO = PDA_NUMERO 
            AND REGISTROS.DCL_CLT_CODIGO = PDA_DET_CODIGO 
            AND REGISTROS.MCL_DCL_SCS_CODIGO = PDA_SCS_CODIGO 
            AND REGISTROS.MCL_UPP_PDT_CODIGO = PDA_UPP_PDT_CODIGO 
            AND REGISTROS.MCL_UPP_UND_ID = PDA_UPP_UND_ID
        WHERE 
            PDA_TIPO = vTYPE
            AND PDA_NUMERO = DOCUMENTO 
            AND PDA_DET_CODIGO = CLIENTE
        GROUP BY 
            PDA_NUMERO, PDA_DET_CODIGO, PDA_SCS_CODIGO, PDA_UPP_PDT_CODIGO, PDA_UPP_UND_ID;
            
           
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    
    
    
    SET TDT_CODIGO := IF(vTYPE IN('1','2','3'),'PDA','PDAT');	
	
    
    OPEN cur_pesadas;
    read_loop: LOOP
        FETCH cur_pesadas INTO CANTIDAD, ID,vPBALANZA,vPTEORICO;
        IF done THEN
            LEAVE read_loop;
        END IF;
        UPDATE ADN_MOVCLI 
        SET MCL_CANTIDAD = CANTIDAD,
	MCL_PIEZAS = IFNULL(ROUND(IF(vPBALANZA = '1',CANTIDAD/vPTEORICO,0),2),0)
        WHERE 
            MCL_DCL_NUMERO = DOCUMENTO 
            AND MCL_DCL_TDT_CODIGO = TDT_CODIGO 
            AND MCL_ACTIVO = '0' 
            AND MCL_ID = ID;
     
    END LOOP;
    CLOSE cur_pesadas;
    UPDATE ADN_DOCCLI 
    SET DCL_ACTIVO = '1' 
    WHERE 
        DCL_NUMERO = DOCUMENTO 
        AND DCL_CLT_CODIGO = CLIENTE 
        AND DCL_ACTIVO = '0' 
        AND DCL_TDT_CODIGO = TDT_CODIGO;
    SET @SetVar := SET_CALCULBASE_SEGUNMOV2(DOCUMENTO, TDT_CODIGO, 1, CURDATE());
END$$

DELIMITER ;



insert into `adn_tipodoc` (`TDT_CODIGO`, `TDT_DESCRIPCION`, `TDT_TIPO`, `TDT_LIBROS`, `TDT_EDOCTA`, `TDT_INV`, `TDT_ESTADO`, `TDT_FISICO`, `TDT_LOGICO`, `TDT_CONTABLE`, `TDT_NUMERO`, `TDT_CUENTA`, `TDT_TIENEISLR`, `TDT_TIENEIMU`, `TDT_TIENERTI`, `TDT_CONTABILIZA`, `TDT_XDOCU`, `TDT_INCIVA`, `TDT_NUMEDIT`, `TDT_NUMCORRE`, `TDT_ASOCIA`, `TDT_ZETA`, `TDT_ORDEN`, `TDT_PROCDETALLE`, `TDT_PROCRESDIA`, `TDT_PIDEFCHDEC`, `TDT_TIPOTRANS`, `TDT_DOCASOCIADO`, `TDT_PIDEDIAS`, `TDT_SQULBANDA`, `TDT_REPORTE`, `TDT_EDITAPRECIO`, `TDT_SQLNUMFIS`, `TDT_COMANDA`, `TDT_BACKORDER`, `TDT_ENTDOC`, `TDT_RECDOC`, `TDT_GUIACARGA`, `TDT_MAXITEMS`, `TDT_DIGITOSNUMFIS`, `TDT_ACTPRECIO`, `TDT_PLANTILLA`, `TDT_TTC_CODIGO`, `TDT_PLANTILLA_DOC`, `TDT_DEBUG`, `TDT_FELCO`, `TDT_CONSULTABASE`, `TDT_SFI_SERIE`, `TDT_IVABS`, `TDT_MONEDA`, `TDT_CONSULTAEXPRESS`, `TDT_FILTROEXPRESS`, `TDT_ALMACENES`, `TDT_IMPORTA_SM`, `TDT_SQLNUMERO`, `TDT_IGTF`, `TDT_LISAEA`, `TDT_SQLSM`, `TDT_TIPOTRAN`, `TDT_REPORTELOTE`, `TDT_LIMITMONTO`, `TDT_NOLOTE`, `TDT_TRASLADAR_DOC`, `ITD_IMPORT_ESP`)
	values
	('PDAT', 'DOCUMENTO TEMPORAL DE TRANSFERENCIA', '3', '0', '0', '1', '1', '0', '0', '0', '', 'Indefinida', '0', '0', '0', '0', '0', '1', '1', '1', '', '0', '0', '', '', '0', '01-REG', '0', '0', '', '', '0', 'SELECT LPAD(MAX(DCL_NUMERO)+1,10,\'0\') FROM ADN_DOCCLI WHERE DCL_TDT_CODIGO=\'PDA\' AND DCL_TIPTRA=\'D\'', '0', '0', '0', '0', '1', '1000', '8', '0', '', NULL, '', '0', '0', NULL, '', '0', 'USD', NULL, '', '', '0', NULL, '0', '0', NULL, 'F', '', '0.00', '0', '0', NULL);
